-- DROP TABLES
IF OBJECT_ID('OrderTracking', 'U') IS NOT NULL DROP TABLE OrderTracking;
IF OBJECT_ID('Payment', 'U') IS NOT NULL DROP TABLE Payment;
IF OBJECT_ID('OrderItem', 'U') IS NOT NULL DROP TABLE OrderItem;
IF OBJECT_ID('Order', 'U') IS NOT NULL DROP TABLE [Order];
IF OBJECT_ID('CartItem', 'U') IS NOT NULL DROP TABLE CartItem;
IF OBJECT_ID('Cart', 'U') IS NOT NULL DROP TABLE Cart;
IF OBJECT_ID('Wishlist', 'U') IS NOT NULL DROP TABLE Wishlist;
IF OBJECT_ID('Product', 'U') IS NOT NULL DROP TABLE Product;
IF OBJECT_ID('Category', 'U') IS NOT NULL DROP TABLE Category;
IF OBJECT_ID('[User]', 'U') IS NOT NULL DROP TABLE [User];

-- 1. Category
CREATE TABLE Category (
    CategoryID INT IDENTITY(1,1) PRIMARY KEY,
    Name VARCHAR(100),
    Description VARCHAR(255),
    ParentCategoryID INT NULL
);

-- 2. User
CREATE TABLE [User] (
    UserID INT IDENTITY(1,1) PRIMARY KEY,
    Name VARCHAR(100),
    Email VARCHAR(100),
    Phone VARCHAR(15),
    PasswordHash VARCHAR(255),
    Role VARCHAR(20),
    CreatedDate DATE DEFAULT GETDATE(),
    IsActive BIT DEFAULT 1
);

-- 3. Product
CREATE TABLE Product (
    ProductID INT IDENTITY(1,1) PRIMARY KEY,
    Name VARCHAR(100),
    Description VARCHAR(255),
    Price DECIMAL(10,2),
    Discount DECIMAL(5,2),
    CategoryID INT,
    StockQuantity INT,
    ImageURL VARCHAR(255),
    CreatedDate DATE DEFAULT GETDATE(),
    IsActive BIT DEFAULT 1,
    FOREIGN KEY (CategoryID) REFERENCES Category(CategoryID)
);

-- 4. Wishlist
CREATE TABLE Wishlist (
    WishlistID INT IDENTITY(1,1) PRIMARY KEY,
    UserID INT,
    ProductID INT,
    CreatedDate DATE DEFAULT GETDATE(),
    FOREIGN KEY (UserID) REFERENCES [User](UserID),
    FOREIGN KEY (ProductID) REFERENCES Product(ProductID)
);

-- 5. Cart & CartItem
CREATE TABLE Cart (
    CartID INT IDENTITY(1,1) PRIMARY KEY,
    UserID INT,
    CreatedDate DATETIME DEFAULT GETDATE(),
    FOREIGN KEY (UserID) REFERENCES [User](UserID)
);

CREATE TABLE CartItem (
    CartItemID INT IDENTITY(1,1) PRIMARY KEY,
    CartID INT,
    ProductID INT,
    Quantity INT,
    FOREIGN KEY (CartID) REFERENCES Cart(CartID),
    FOREIGN KEY (ProductID) REFERENCES Product(ProductID)
);

-- 6. Order & OrderItem
CREATE TABLE [Order] (
    OrderID INT IDENTITY(1,1) PRIMARY KEY,
    UserID INT,
    OrderDate DATE DEFAULT GETDATE(),
    PaymentID INT,
    TotalAmount DECIMAL(10,2),
    OrderStatus VARCHAR(20),
    FOREIGN KEY (UserID) REFERENCES [User](UserID)
);

CREATE TABLE OrderItem (
    OrderItemID INT IDENTITY(1001,1) PRIMARY KEY,
    OrderID INT,
    ProductID INT,
    Quantity INT,
    UnitPrice DECIMAL(10,2),
    FOREIGN KEY (OrderID) REFERENCES [Order](OrderID),
    FOREIGN KEY (ProductID) REFERENCES Product(ProductID)
);

-- 7. Payment
CREATE TABLE Payment (
    PaymentID INT IDENTITY(1001,1) PRIMARY KEY,
    OrderID INT,
    PaymentDate DATE DEFAULT GETDATE(),
    Amount DECIMAL(10,2),
    PaymentMethod VARCHAR(20),
    PaymentStatus VARCHAR(20),
    TransactionID VARCHAR(50),
    FOREIGN KEY (OrderID) REFERENCES [Order](OrderID)
);

-- 8. Order Tracking
CREATE TABLE OrderTracking (
    TrackingID INT IDENTITY(1001,1) PRIMARY KEY,
    OrderID INT,
    StatusUpdate VARCHAR(50),
    UpdateTime DATETIME DEFAULT GETDATE(),
    Remarks VARCHAR(255),
    FOREIGN KEY (OrderID) REFERENCES [Order](OrderID)
);


INSERT INTO Category (Name, Description, ParentCategoryID) VALUES
('Earrings', 'All types of earrings', NULL),
('Studs', 'Small stud earrings', 1),
('Hoops', 'Round hoop earrings', 1);

INSERT INTO [User] (Name, Email, Phone, PasswordHash, Role, CreatedDate, IsActive) VALUES
('Aarti Sharma', 'aarti@example.com', '9876543210', 'hash123', 'Customer', '2025-06-01', 1),
('Admin User', 'admin@example.com', '9999999999', 'adminhash', 'Admin', '2025-06-01', 1);

INSERT INTO Product (Name, Description, Price, Discount, CategoryID, StockQuantity, ImageURL, CreatedDate, IsActive) VALUES
('Diamond Studs', '14K gold diamond studs', 1500.00, 10.00, 2, 50, 'img/diamond_studs.jpg', '2025-06-01', 1),
('Gold Hoops', '22K traditional gold hoops', 2200.00, 5.00, 3, 30, 'img/gold_hoops.jpg', '2025-06-01', 1);


INSERT INTO Wishlist (UserID, ProductID, CreatedDate) VALUES
(1, 1, '2025-06-02'),
(1, 2, '2025-06-03');

INSERT INTO Cart (UserID) VALUES (1);

INSERT INTO CartItem (CartID, ProductID, Quantity) VALUES
(1, 1, 2),
(1, 2, 1);

INSERT INTO [Order] (UserID, OrderDate, TotalAmount, OrderStatus) VALUES
(1, '2025-06-05', 3700.00, 'Shipped');


INSERT INTO OrderItem (OrderID, ProductID, Quantity, UnitPrice) VALUES
(1, 1, 2, 1350.00),
(1, 2, 1, 2090.00);

INSERT INTO Payment (OrderID, PaymentDate, Amount, PaymentMethod, PaymentStatus, TransactionID) VALUES
(1, '2025-06-05', 3700.00, 'Stripe', 'Success', 'TXN123456789');

UPDATE [Order] SET PaymentID = 1001 WHERE OrderID = 1;

INSERT INTO OrderTracking (OrderID, StatusUpdate, UpdateTime, Remarks) VALUES
(1, 'Shipped', '2025-06-06 10:00:00', 'Left warehouse'),
(1, 'Out for Delivery', '2025-06-07 08:30:00', 'Delivery by BlueDart');


-- 1. Select all from Category
SELECT * FROM Category;

-- 2. Select all from User
SELECT * FROM [User];

-- 3. Select all from Product
SELECT * FROM Product;

-- 4. Select all from Wishlist
SELECT * FROM Wishlist;

-- 5. Select all from Cart
SELECT * FROM Cart;

-- 6. Select all from CartItem
SELECT * FROM CartItem;

-- 7. Select all from Order
SELECT * FROM [Order];

-- 8. Select all from OrderItem
SELECT * FROM OrderItem;

-- 9. Select all from Payment
SELECT * FROM Payment;

-- 10. Select all from OrderTracking
SELECT * FROM OrderTracking;
